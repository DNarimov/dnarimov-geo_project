import streamlit as st
from pypdf import PdfReader
import pandas as pd
import math
import re
from openai import OpenAI
from io import BytesIO

client = OpenAI(api_key=st.secrets["openai_api_key"])

column_translations = {
    "ru": ["‚Ññ –ø/–ø", "‚Ññ –í—ã—Ä–∞–±–æ—Ç–∫–∏", "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–∫—Ç—Ä–æ–¥–∞–º–∏ –∞, (–º)", "–ü–æ–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–±–æ—Ä–∞ R, (–û–º)",
            "–£–¥–µ–ª—å–Ω–æ–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ œÅ=2œÄRa –û–º¬∑–º", "–ö–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –ø–æ NACE",
            "–ö–æ—Ä—Ä–æ–∑–∏–æ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ ASTM"],
    "en": ["No.", "Test Point", "Electrode Spacing a, (m)", "Instrument Reading R (Ohm)",
            "Resistivity œÅ = 2œÄRa (Ohm¬∑m)", "Corrosion Class (NACE)", "Corrosion Activity (ASTM)"],
    "uz": ["‚Ññ", "Ish joyi", "Elektrodlar orasidagi masofa a, (m)", "Asbob ko'rsatkichi R (Om)",
            "Xususiy qarshilik œÅ = 2œÄRa (Om¬∑m)", "Korroziya klassi (NACE)", "Korroziya faolligi (ASTM)"]
}

corrosion_labels = { ... }  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

astm_standards = { ... }  # –∫–∞–∫ —Ä–∞–Ω—å—à–µ

corrosion_classes = [ ... ]  # –∫–∞–∫ —Ä–∞–Ω—å—à–µ

corrosion_colors = { ... }  # –∫–∞–∫ —Ä–∞–Ω—å—à–µ

def classify_corrosion(val):
    try:
        v = float(val)
        for low, high, nace, astm in corrosion_classes:
            if low <= v <= high:
                return nace, astm
        return "Out of range", "Out of range"
    except:
        return "Invalid", "Invalid"

def format_float(val):
    try:
        return f"{round(float(str(val).replace(',', '.')), 2):.2f}"
    except:
        return "-"

def parse_distance_to_meters(raw):
    val = raw.lower().strip().replace(",", ".")
    if "—Å–º" in val or "cm" in val:
        digits = re.findall(r"[\d.]+", val)
        return round(float(digits[0]) / 100, 4) if digits else None
    try:
        f = float(val)
        return round(f / 100, 4) if f > 10 else round(f, 4)
    except:
        return None

def extract_text_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    return "".join([p.extract_text() or "" for p in reader.pages])

def ask_gpt_astm_analysis(test_name, text, model, lang):
    prompt = f'''
From the report below for the "{test_name}" test, perform:
- Extract ALL tabular data rows
- Format: columns for #:, point, a (m), R, resistivity, NACE, ASTM
- Use 2 decimal places
- Show '-' for missing values
- After table, write a plain summary:
  * which values were missing and calculated
  * what ASTM fields are missing
  * conclusion about compliance
Use language: {lang.upper()}

"""
{text}
"""
'''
    resp = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
        max_tokens=2000
    )
    return resp.choices[0].message.content

def gpt_response_to_table(resp, lang):
    lines = [l for l in resp.strip().split("\n") if l.strip() and "|" in l and "---" not in l and "‚Ññ" not in l]
    data = []
    for l in lines:
        parts = [p.strip() for p in l.strip("- ").split("|") if p.strip()]
        if len(parts) < 5:
            continue
        num, point, a_raw, r_val, rho_val = parts[:5]
        a = parse_distance_to_meters(a_raw)
        r = format_float(r_val)
        rho = format_float(2 * math.pi * float(r) * a) if (a and r != '-') else format_float(rho_val)
        nace, astm = classify_corrosion(rho)
        t_nace = corrosion_labels[lang].get(nace, nace)
        t_astm = corrosion_labels[lang].get(astm, astm)
        data.append([num, point, format_float(a), r, rho, t_nace, t_astm])
    return pd.DataFrame(data, columns=column_translations[lang])

def style_table(df):
    def style_corrosion(v): return f"background-color: {corrosion_colors.get(v, '#fff')}"
    return df.style \
        .applymap(style_corrosion, subset=df.columns[-2:])

# === Streamlit UI ===
st.set_page_config("Geotechnical Test Result Checker", layout="wide")
st.title("Geotechnical Test Result Checker")

lang = st.sidebar.selectbox("üåê Language / –Ø–∑—ã–∫", ["–†—É—Å—Å–∫–∏–π", "English", "O'zbek"])
lang_code = {"–†—É—Å—Å–∫–∏–π": "ru", "English": "en", "O'zbek": "uz"}[lang]

model_choice = st.sidebar.selectbox("ü§ñ Juru AI Model", ["gpt-4-turbo", "gpt-3.5-turbo"])

tests = list(astm_standards.keys())
tabs = st.tabs(tests)

for i, test in enumerate(tests):
    with tabs[i]:
        st.subheader(test)
        file = st.file_uploader(f"Upload PDF for {test}", type="pdf", key=test)
        if file:
            text = extract_text_from_pdf(file)
            with st.spinner("Analyzing..."):
                response = ask_gpt_astm_analysis(test, text, model_choice, lang_code)
                df = gpt_response_to_table(response, lang_code)
            st.dataframe(style_table(df), use_container_width=True)

            # Summary
            st.markdown("### Summary & Compliance")
            summary_started = False
            for line in response.splitlines():
                if any(word in line.lower() for word in ["summary", "–∏—Ç–æ–≥", "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "compliance"]):
                    summary_started = True
                if summary_started and line.strip() and "|" not in line:
                    st.markdown(f"- {line.strip('-‚Ä¢* ')}")

            # Download
            out = BytesIO()
            with pd.ExcelWriter(out, engine="xlsxwriter") as w:
                df.to_excel(w, index=False)
            st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å Excel", out.getvalue(), file_name="ERT_Report.xlsx")
