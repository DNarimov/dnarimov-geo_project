import streamlit as st
from pypdf import PdfReader
from fpdf import FPDF
import io
import os
import openai
import streamlit as st

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á –∏–∑ —Å–µ–∫—Ä–µ—Ç–∞
openai.api_key = st.secrets["openai_api_key"]


# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def extract_text_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text() or ""
    return text

def display_test_result(test_name, text):
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞: {test_name}")
    findings = []

    if test_name == "UCS Test - Soil":
        if "kPa" in text or "MPa" in text:
            findings.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è. –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ASTM D2166.")
            st.success(findings[-1])
        else:
            findings.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PDF.")
            st.error(findings[-1])

    elif test_name == "Proctor Test":
        if "dry density" in text.lower() or "moisture" in text.lower():
            findings.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏. –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ASTM D698/D1557.")
            st.success(findings[-1])
        else:
            findings.append("‚ö† –î–∞–Ω–Ω—ã–µ –ø–æ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            st.warning(findings[-1])

    else:
        findings.append("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        st.info(findings[-1])

    return findings

def generate_pdf_report(test_name, findings):
    pdf = FPDF()
    pdf.add_page()

    # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
    font_path = os.path.join(os.path.dirname(__file__), "DejaVuSans.ttf")
    pdf.add_font("DejaVu", "", font_path, uni=True)
    pdf.set_font("DejaVu", size=12)

    pdf.cell(200, 10, txt=f"–û—Ç—á—ë—Ç –ø–æ —Ç–µ—Å—Ç—É: {test_name}", ln=True)
    pdf.cell(200, 10, txt="", ln=True)
    for item in findings:
        pdf.multi_cell(0, 10, txt=item)

    pdf_data = pdf.output(dest='S').encode("utf-8")
    pdf_buffer = io.BytesIO(pdf_data)
    return pdf_buffer

# ====== –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° ======
st.set_page_config(page_title="Geotechnical Test Validator", layout="wide")
st.title("üìä Geotechnical Test Result Checker")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
test_types = [
    "Electrical Resistivity Test (ERT)",
    "Seismic Refraction Test (SRT)",
    "Atterberg Limit Test",
    "Sieve Analysis",
    "UCS Test - Soil",
    "UCS Test - Rock",
    "Oedometer Test",
    "Direct Shear Test",
    "Collapse Test",
    "California Bearing Ratio",
    "Proctor Test"
]

# ====== –ù–ê–í–ò–ì–ê–¶–ò–Ø –ü–û –í–ö–õ–ê–î–ö–ê–ú ======
tabs = st.tabs(test_types)

for i, test_name in enumerate(test_types):
    with tabs[i]:
        st.header(f"üß™ {test_name}")
        uploaded_file = st.file_uploader(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–ª—è {test_name}", type="pdf", key=test_name)

        if uploaded_file:
            with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF..."):
                text = extract_text_from_pdf(uploaded_file)
                st.success("PDF –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.")

                findings = display_test_result(test_name, text)

            pdf_file = generate_pdf_report(test_name, findings)
            st.download_button(
                label="üìÑ –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç",
                data=pdf_file,
                file_name=f"{test_name.replace(' ', '_')}_report.pdf",
                mime="application/pdf"
            )
