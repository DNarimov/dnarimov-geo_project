import streamlit as st
from pypdf import PdfReader
from fpdf import FPDF
import io
import os
from openai import OpenAI  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á
client = OpenAI(api_key=st.secrets["openai_api_key"])

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ ASTM
astm_standards = {
    "Electrical Resistivity Test (ERT)": "ASTM G57",
    "Seismic Refraction Test (SRT)": "ASTM D5777",
    "Atterberg Limit Test": "ASTM D4318",
    "Sieve Analysis": "ASTM D6913",
    "UCS Test - Soil": "ASTM D2166",
    "UCS Test - Rock": "ASTM D7012",
    "Oedometer Test": "ASTM D2435",
    "Direct Shear Test": "ASTM D3080",
    "Collapse Test": "ASTM D5333",
    "California Bearing Ratio": "ASTM D1883",
    "Proctor Test": "ASTM D698"
}

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def extract_text_from_pdf(pdf_file):
    reader = PdfReader(pdf_file)
    text = ""
    for page in reader.pages:
        text += page.extract_text() or ""
    return text

def display_test_result(test_name, text):
    st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞: {test_name}")
    findings = []

    if any(x in text.lower() for x in ["density", "stress", "moisture", "shear"]):
        findings.append("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        st.success(findings[-1])
    else:
        findings.append("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. GPT –ø–æ–º–æ–∂–µ—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º.")
        st.warning(findings[-1])

    return findings

def generate_pdf_report(test_name, findings):
    pdf = FPDF()
    pdf.add_page()

    font_path = os.path.join(os.path.dirname(__file__), "DejaVuSans.ttf")
    pdf.add_font("DejaVu", "", font_path, uni=True)
    pdf.set_font("DejaVu", size=12)

    pdf.cell(200, 10, txt=f"–û—Ç—á—ë—Ç –ø–æ —Ç–µ—Å—Ç—É: {test_name}", ln=True)
    pdf.cell(200, 10, txt="", ln=True)
    for item in findings:
        pdf.multi_cell(0, 10, txt=str(item))  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥

    pdf_data = pdf.output(dest='S').encode("utf-8")
    return io.BytesIO(pdf_data)

# üî• GPT-–∞–Ω–∞–ª–∏–∑ ASTM
def ask_gpt_astm_analysis(test_name, extracted_text):
    standard = astm_standards.get(test_name, "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ASTM —Å—Ç–∞–Ω–¥–∞—Ä—Ç")

    prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É **{standard}** –¥–ª—è —Ç–µ—Å—Ç–∞ **{test_name}**.

    –£–∫–∞–∂–∏:
    1. –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
    2. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
    3. –û—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è.
    4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é.

    –¢–µ–∫—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:
    \"\"\"
    {extracted_text}
    \"\"\"
    """

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
            max_tokens=1500
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}"

# ====== –ò–ù–¢–ï–†–§–ï–ô–° STREAMLIT ======
st.set_page_config(page_title="Geotechnical Test Validator", layout="wide")
st.title("üìä Geotechnical Test Result Checker")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≥–ª–∞—Å–Ω–æ ASTM.")

test_types = list(astm_standards.keys())
tabs = st.tabs(test_types)

for i, test_name in enumerate(test_types):
    with tabs[i]:
        st.header(f"üß™ {test_name}")
        uploaded_file = st.file_uploader(f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –¥–ª—è {test_name}", type="pdf", key=test_name)

        if uploaded_file:
            with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF..."):
                text = extract_text_from_pdf(uploaded_file)
                st.success("‚úÖ PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

                findings = display_test_result(test_name, text)

                st.subheader("ü§ñ –ê–Ω–∞–ª–∏–∑ ChatGPT –ø–æ ASTM")
                gpt_response = ask_gpt_astm_analysis(test_name, text)
                st.markdown(gpt_response)

                pdf_file = generate_pdf_report(test_name, findings)
                st.download_button(
                    label="üìÑ –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç",
                    data=pdf_file,
                    file_name=f"{test_name.replace(' ', '_')}_report.pdf",
                    mime="application/pdf"
                )
